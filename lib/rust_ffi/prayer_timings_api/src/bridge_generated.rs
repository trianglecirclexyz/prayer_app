#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

fn wire_get_prayer_timings_impl(
    port_: MessagePort,
    lat: impl Wire2Api<f64> + UnwindSafe,
    lon: impl Wire2Api<f64> + UnwindSafe,
    day: impl Wire2Api<u32> + UnwindSafe,
    month: impl Wire2Api<u32> + UnwindSafe,
    year: impl Wire2Api<i32> + UnwindSafe,
    madhab: impl Wire2Api<i32> + UnwindSafe,
    method: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_prayer_timings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_lat = lat.wire2api();
            let api_lon = lon.wire2api();
            let api_day = day.wire2api();
            let api_month = month.wire2api();
            let api_year = year.wire2api();
            let api_madhab = madhab.wire2api();
            let api_method = method.wire2api();
            move |task_callback| {
                Ok(get_prayer_timings(
                    api_lat, api_lon, api_day, api_month, api_year, api_madhab, api_method,
                ))
            }
        },
    )
}
fn wire_get_calculated_hijri_date_impl(
    port_: MessagePort,
    day: impl Wire2Api<u32> + UnwindSafe,
    month: impl Wire2Api<u32> + UnwindSafe,
    year: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_calculated_hijri_date",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_day = day.wire2api();
            let api_month = month.wire2api();
            let api_year = year.wire2api();
            move |task_callback| Ok(get_calculated_hijri_date(api_day, api_month, api_year))
        },
    )
}
fn wire_get_qiblah_angle_from_north_impl(
    port_: MessagePort,
    lat: impl Wire2Api<f64> + UnwindSafe,
    lon: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_qiblah_angle_from_north",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_lat = lat.wire2api();
            let api_lon = lon.wire2api();
            move |task_callback| Ok(get_qiblah_angle_from_north(api_lat, api_lon))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
