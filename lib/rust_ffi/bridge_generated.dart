// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.45.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class PrayerTimingsApi {
  Future<String> getPrayerTimings(
      {required double lat,
      required double lon,
      required int day,
      required int month,
      required int year,
      required int madhab,
      required int method,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPrayerTimingsConstMeta;

  Future<String> getCalculatedHijriDate(
      {required int day, required int month, required int year, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCalculatedHijriDateConstMeta;

  Future<double> getQiblahAngleFromNorth(
      {required double lat, required double lon, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetQiblahAngleFromNorthConstMeta;
}

class PrayerTimingsApiImpl implements PrayerTimingsApi {
  final PrayerTimingsApiPlatform _platform;
  factory PrayerTimingsApiImpl(ExternalLibrary dylib) =>
      PrayerTimingsApiImpl.raw(PrayerTimingsApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory PrayerTimingsApiImpl.wasm(FutureOr<WasmModule> module) =>
      PrayerTimingsApiImpl(module as ExternalLibrary);
  PrayerTimingsApiImpl.raw(this._platform);
  Future<String> getPrayerTimings(
          {required double lat,
          required double lon,
          required int day,
          required int month,
          required int year,
          required int madhab,
          required int method,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_prayer_timings(
            port_,
            api2wire_f64(lat),
            api2wire_f64(lon),
            api2wire_u32(day),
            api2wire_u32(month),
            api2wire_i32(year),
            api2wire_i32(madhab),
            api2wire_i32(method)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetPrayerTimingsConstMeta,
        argValues: [lat, lon, day, month, year, madhab, method],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetPrayerTimingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_prayer_timings",
        argNames: ["lat", "lon", "day", "month", "year", "madhab", "method"],
      );

  Future<String> getCalculatedHijriDate(
          {required int day,
          required int month,
          required int year,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_calculated_hijri_date(
            port_, api2wire_u32(day), api2wire_u32(month), api2wire_i32(year)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetCalculatedHijriDateConstMeta,
        argValues: [day, month, year],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetCalculatedHijriDateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_calculated_hijri_date",
        argNames: ["day", "month", "year"],
      );

  Future<double> getQiblahAngleFromNorth(
          {required double lat, required double lon, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_qiblah_angle_from_north(
            port_, api2wire_f64(lat), api2wire_f64(lon)),
        parseSuccessData: _wire2api_f64,
        constMeta: kGetQiblahAngleFromNorthConstMeta,
        argValues: [lat, lon],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetQiblahAngleFromNorthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_qiblah_angle_from_north",
        argNames: ["lat", "lon"],
      );
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

// Section: wire2api

String _wire2api_String(dynamic raw) {
  return raw as String;
}

double _wire2api_f64(dynamic raw) {
  return raw as double;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

class PrayerTimingsApiPlatform
    extends FlutterRustBridgeBase<PrayerTimingsApiWire> {
  PrayerTimingsApiPlatform(ffi.DynamicLibrary dylib)
      : super(PrayerTimingsApiWire(dylib));
// Section: api2wire

// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PrayerTimingsApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PrayerTimingsApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PrayerTimingsApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>
        ptr,
  ) {
    return _store_dart_post_cobject(
      ptr.address,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(int)>();

  void wire_get_prayer_timings(
    int port_,
    double lat,
    double lon,
    int day,
    int month,
    int year,
    int madhab,
    int method,
  ) {
    return _wire_get_prayer_timings(
      port_,
      lat,
      lon,
      day,
      month,
      year,
      madhab,
      method,
    );
  }

  late final _wire_get_prayer_timingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Double,
              ffi.Double,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('wire_get_prayer_timings');
  late final _wire_get_prayer_timings = _wire_get_prayer_timingsPtr.asFunction<
      void Function(int, double, double, int, int, int, int, int)>();

  void wire_get_calculated_hijri_date(
    int port_,
    int day,
    int month,
    int year,
  ) {
    return _wire_get_calculated_hijri_date(
      port_,
      day,
      month,
      year,
    );
  }

  late final _wire_get_calculated_hijri_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32,
              ffi.Int32)>>('wire_get_calculated_hijri_date');
  late final _wire_get_calculated_hijri_date =
      _wire_get_calculated_hijri_datePtr
          .asFunction<void Function(int, int, int, int)>();

  void wire_get_qiblah_angle_from_north(
    int port_,
    double lat,
    double lon,
  ) {
    return _wire_get_qiblah_angle_from_north(
      port_,
      lat,
      lon,
    );
  }

  late final _wire_get_qiblah_angle_from_northPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Double,
              ffi.Double)>>('wire_get_qiblah_angle_from_north');
  late final _wire_get_qiblah_angle_from_north =
      _wire_get_qiblah_angle_from_northPtr
          .asFunction<void Function(int, double, double)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

typedef bool = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>;
